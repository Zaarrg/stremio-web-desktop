name: Docker Build and Release

on:
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight UTC
  workflow_dispatch: # Allows manual trigger

jobs:
  fetch-and-check:
    runs-on: ubuntu-latest

    outputs:
      new_release: ${{ steps.set-output.outputs.new_release }}
      latest_commit_hash: ${{ steps.set-output.outputs.latest_commit_hash }}
      latest_server_tag: ${{ steps.set-output.outputs.latest_server_tag }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Fetch latest Stremio versions
      - name: Fetch latest Stremio versions
        run: node scripts/fetch-latest-stremio.js

      # Step 5: Get the latest release description
      - name: Get latest release
        id: latest-release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              core.setOutput('description', latestRelease.data.body || '');
              core.setOutput('found', true);
            } catch (error) {
              if (error.status === 404) {
                console.log('No releases found. This is the initial run.');
                core.setOutput('description', '');
                core.setOutput('found', false);
              } else {
                throw error;
              }
            }

      # Step 6: Compare fetched versions with release versions and set outputs
      - name: Check for new versions and set outputs
        id: set-output
        run: |
          if [ "${{ steps.latest-release.outputs.found }}" != "true" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
          else
            LATEST_DESCRIPTION="${{ steps.latest-release.outputs.description }}"
            if [[ "$LATEST_DESCRIPTION" == *"Web version: ${{ env.LATEST_COMMIT_HASH }}"* && "$LATEST_DESCRIPTION" == *"Server version: ${{ env.LATEST_SERVER_TAG }}"* ]]; then
              echo "new_release=false" >> $GITHUB_OUTPUT
            else
              echo "new_release=true" >> $GITHUB_OUTPUT
            fi
          fi
          echo "latest_commit_hash=${{ env.LATEST_COMMIT_HASH }}" >> $GITHUB_OUTPUT
          echo "latest_server_tag=${{ env.LATEST_SERVER_TAG }}" >> $GITHUB_OUTPUT

  docker-build-and-push:
    needs: fetch-and-check
    if: ${{ needs.fetch-and-check.outputs.new_release == 'true' }}
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Build and push Docker image to GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/zaarrg/stremio-web-desktop:latest
            ghcr.io/zaarrg/stremio-web-desktop:${{ needs.fetch-and-check.outputs.latest_commit_hash }}-${{ needs.fetch-and-check.outputs.latest_server_tag }}
